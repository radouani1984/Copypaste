from fastapi import Request
from starlette.responses import JSONResponse
import jwt # Requires PyJWT
from jwt import PyJWKClient, ExpiredSignatureError
from core.app_settings import AppSettings

class JWTValidationMiddleware(BaseHTTPMiddleware):
    def __init__(self, app, app_settings: AppSettings, jwks_validator: JWKSValidator, exclude_paths=None, *args, **kwargs):
        super().__init__(app, *args, **kwargs)
        self.app = app
        self.jwks_validator = jwks_validator
        self.app_settings = app_settings
        self.exclude_paths = exclude_paths or []

    async def dispatch(self, request: Request, call_next, *args, **kwargs):
        token = None
        for key, value in request.headers.items():
            if key.lower() == 'authorization':
                token = value.decode("utf-8")

        if not token or request.url.path in self.exclude_paths:
            return await call_next(request)

        token = token.split(" ")[-1] # Extract the token from the "Bearer <token>" format
        unverified_header = jwt.get_unverified_header(token)
        kid = unverified_header.get("kid")

        try:
            # Fetch the key based on 'kid' from the JWK set
            key_dict = self.jwks_validator.get_key(kid)
            jwk_client = PyJWKClient(self.jwks_validator.jwks_url)
            signing_key = jwk_client.get_signing_key_from_jwk(key_dict)

            # Decode and validate the token
            jwt.decode(
                token,
                signing_key.key,
                audience=self.app_settings.taase_audience,
                algorithms=["RS256"]
            )
        except ExpiredSignatureError:
            return JSONResponse(content={"detail": "Token expired"}, status_code=401)
        except jwt.PyJWTError as e:
            return JSONResponse(content={"detail": "JWT Validation failed"}, status_code=401)

        return await call_next(request)
